""" Документация:

1 - выводит загадку, выбранную случайным способом
2 - запрашивает число попыток
3 - предлагает варианты ответа:
        - собирает список вариантов один из словаря
          с решениями и два из списка с неправильными
          решениями
        - выводит список на экран
4 - принимает ответ, проверяет его правильность
5 - выводит результат: угалано или не угадано
        - в случае неправильного решения считает попытки
        - в случае правильного решения предлагает сыграть еще

"""
__all__ = ['game']
RIDDLES = ['Зимой и летом одним цветом', 'Не лает, не кусает, а в дом не пускает', 'У кого за носом пятка?']
SOLUTIONS = ['Ёлка', 'Замок', 'Ботинок']
NONSOLUTIONS = ['Чайка', 'Кофемолка', 'Микроволновка']

# Создаем словарь {Загадка: Отгадка}
dct = {}
for i, j in enumerate(RIDDLES):
    dct[j] = SOLUTIONS[i]

def game(riddle, options_list, attempt_num): # функция принимает 3 параметра: загадка, список вариантов ответа, число попыток
    answer = '' # вводим переменную ответа
    i = 0 # создаем счетчик для ограничения числа ответов
    while i != attempt_num:
        i += 1
        n = int(input(f'\nПопытка {i}. Выберите вариант ответа клавишами: 1, 2 или 3  --->  ')) # ввод варианта ответа
        answer = options_list[n-1] # преобразуем номер варианта ответа в строку из списка вариантов
        print(f'\nВаш ответ: [{answer}]:', end='\t') # выводим ответ на экран
        if answer == dct[riddle]: # условие соответствия ответа значению из словаря
            att = ''
            if i == 1:
                att = 'попытка'
            elif i in (2, 3, 4, ):
                att = 'попытки'
            else:
                att = 'попыток'
            print('Верно', f'Вам потребовалось {i} {att}', end='\t') 
            i = attempt_num # выход из цикла ввода вариантов
        else:
            print('Неверно', '\n')
    return dct[riddle]


if __name__ == '__main__':

    None