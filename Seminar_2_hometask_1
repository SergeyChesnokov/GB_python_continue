# /////////////////   Задача о 16-ричном числе   /////////////////

#    ===   Вариант с циклом while   ===

n = int(input('\nВведите число:\t\t\t\tn = '))
print(f'\nПрямая проверка функцией hex():\t\t{hex(n):>}')

lst = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
BASE = len(lst)

view_n = ''
while n > 0:
    view_n = lst[n % BASE] + view_n
    n = n // BASE

print(f'\nПолученное решение:\t\t\t0x{view_n:>}')
print(f'\nОбратная проверка функцией int():\tn = {int(view_n, base=16):>}\n\n')

#    ===   Вариант с циклом for in   ===

# from math import ceil, log

# n = int(input('\nВведите число:\t\t\t\tn = '))
# print(f'\nПрямая проверка функцией hex():\t\t{hex(n):>}')

# lst = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
# BASE = len(lst)

# view_n = ''
# for _ in range(ceil(log(n+1, BASE))):
#     '''
#     Цикл должен отработать ровно столько раз, сколько знаков в 16-ричном числе,
#     чтобы не потерять знаки или не получить лишние ноли в ответе.
#     Комбинация из n порядков по 16 знаков даёт 16**n вариантов,
#     следовательно, для определения числа знаков воспользуемся обратной функцией:
#     log по основанию 16 от введенного числа, а затем округлим вверх до целого.
#     Т.к. функция range() не принимает последнее значение, то n увеличено на 1
#     NB: Работает не смотря на сложность формулы достаточно быстро даже для чисел
#     очень больших порядков и даже на слабой машине.
#     '''
#     view_n = lst[n % BASE] + view_n
#     n = n // BASE

# print(f'\nПолученное решение:\t\t\t0x{view_n:>}')
# print(f'\nОбратная проверка функцией int():\tn = {int(view_n, base=16):>}\n\n')


